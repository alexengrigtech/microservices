plugins {
    id 'org.springframework.boot' apply false
    id 'io.spring.dependency-management' apply false
    id 'io.github.alexengrig.spring-banner' apply false
}

subprojects {
    pluginManager.withPlugin('java') {
        group = 'dev.alexengrig.microservice'
        version = '0.1.0-SNAPSHOT'

        sourceCompatibility = '17'

        repositories {
            mavenCentral()
        }

        test {
            useJUnitPlatform()
        }
    }

    pluginManager.withPlugin('org.springframework.boot') {
        apply plugin: 'io.spring.dependency-management'
        apply plugin: 'io.github.alexengrig.spring-banner'

        springBoot {
            buildInfo()
        }

        dependencyManagement {
            imports {
                mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
            }
        }

        dependencies {
            // Spring Boot
            implementation('org.springframework.boot:spring-boot-starter')
            testImplementation('org.springframework.boot:spring-boot-starter-test')

            // Spring Boot Actuator
            implementation('org.springframework.boot:spring-boot-starter-actuator')

            // Spring Cloud LoadBalancer is currently working with the default cache.
            // While this cache implementation is useful for development and tests,
            // it's recommended to use Caffeine cache in production.
            // You can switch to using Caffeine cache,
            // by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
            implementation('com.github.ben-manes.caffeine:caffeine')

            // Lombok
            compileOnly('org.projectlombok:lombok')
            annotationProcessor('org.projectlombok:lombok')
            testCompileOnly('org.projectlombok:lombok')
            testAnnotationProcessor('org.projectlombok:lombok')
        }

        bootBuildImage {
            def user = 'alexengrig'
            imageName = "${user}/ms-${project.name}:${project.version}"
            docker {
                publishRegistry {
                    username = user
                    password = System.getenv('IMAGE_REGISTRY_TOKEN')
                }
            }
        }
    }
}
